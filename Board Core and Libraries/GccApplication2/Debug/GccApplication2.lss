
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001204  00001298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  0080013e  0080013e  000012d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d9  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a0  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  00002dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000686  00000000  00000000  00004199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000481f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_1>
       8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_2>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_16>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_18>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	e7 01       	movw	r28, r14
      6a:	df 01       	movw	r26, r30
      6c:	e3 01       	movw	r28, r6
      6e:	d7 01       	movw	r26, r14
      70:	eb 01       	movw	r28, r22
      72:	ef 01       	movw	r28, r30
      74:	f3 01       	movw	r30, r6
      76:	fa 01       	movw	r30, r20
      78:	fa 01       	movw	r30, r20
      7a:	fa 01       	movw	r30, r20
      7c:	fa 01       	movw	r30, r20
      7e:	fa 01       	movw	r30, r20
      80:	fa 01       	movw	r30, r20
      82:	fa 01       	movw	r30, r20
      84:	fa 01       	movw	r30, r20
      86:	fa 01       	movw	r30, r20
      88:	f7 01       	movw	r30, r14
      8a:	db 01       	movw	r26, r22
      8c:	0f 03       	fmul	r16, r23
      8e:	f7 02       	muls	r31, r23
      90:	fa 02       	muls	r31, r26
      92:	fd 02       	muls	r31, r29
      94:	00 03       	mulsu	r16, r16
      96:	03 03       	mulsu	r16, r19
      98:	06 03       	mulsu	r16, r22
      9a:	09 03       	fmul	r16, r17
      9c:	0c 03       	fmul	r16, r20

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d8 e0       	ldi	r29, 0x08	; 8
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e4 e0       	ldi	r30, 0x04	; 4
      b2:	f2 e1       	ldi	r31, 0x12	; 18
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ae 33       	cpi	r26, 0x3E	; 62
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	ae e3       	ldi	r26, 0x3E	; 62
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	af 37       	cpi	r26, 0x7F	; 127
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 02 04 	call	0x804	; 0x804 <main>
      d4:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init>:
unsigned char USART_ReceivePolling(){
	char DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
      dc:	82 ef       	ldi	r24, 0xF2	; 242
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	1b b8       	out	0x0b, r1	; 11
      e2:	87 e3       	ldi	r24, 0x37	; 55
      e4:	84 b9       	out	0x04, r24	; 4
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	85 b9       	out	0x05, r24	; 5
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	87 b9       	out	0x07, r24	; 7
      ee:	8c ef       	ldi	r24, 0xFC	; 252
      f0:	88 b9       	out	0x08, r24	; 8
      f2:	84 b5       	in	r24, 0x24	; 36
      f4:	83 6a       	ori	r24, 0xA3	; 163
      f6:	84 bd       	out	0x24, r24	; 36
      f8:	85 b5       	in	r24, 0x25	; 37
      fa:	82 60       	ori	r24, 0x02	; 2
      fc:	85 bd       	out	0x25, r24	; 37
      fe:	ee e6       	ldi	r30, 0x6E	; 110
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	81 60       	ori	r24, 0x01	; 1
     106:	80 83       	st	Z, r24
     108:	e0 e8       	ldi	r30, 0x80	; 128
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	82 68       	ori	r24, 0x82	; 130
     110:	80 83       	st	Z, r24
     112:	e1 e8       	ldi	r30, 0x81	; 129
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 81       	ld	r24, Z
     118:	89 61       	ori	r24, 0x19	; 25
     11a:	80 83       	st	Z, r24
     11c:	8f e1       	ldi	r24, 0x1F	; 31
     11e:	9e e4       	ldi	r25, 0x4E	; 78
     120:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     124:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     128:	8a e3       	ldi	r24, 0x3A	; 58
     12a:	97 e0       	ldi	r25, 0x07	; 7
     12c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     130:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     134:	e0 eb       	ldi	r30, 0xB0	; 176
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	83 60       	ori	r24, 0x03	; 3
     13c:	80 83       	st	Z, r24
     13e:	e1 eb       	ldi	r30, 0xB1	; 177
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	84 60       	ori	r24, 0x04	; 4
     146:	80 83       	st	Z, r24
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     150:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     15a:	88 e9       	ldi	r24, 0x98	; 152
     15c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	83 60       	ori	r24, 0x03	; 3
     16a:	8d bb       	out	0x1d, r24	; 29
     16c:	e9 e6       	ldi	r30, 0x69	; 105
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	85 60       	ori	r24, 0x05	; 5
     174:	80 83       	st	Z, r24
     176:	80 81       	ld	r24, Z
     178:	8d 7f       	andi	r24, 0xFD	; 253
     17a:	80 83       	st	Z, r24
     17c:	80 81       	ld	r24, Z
     17e:	87 7f       	andi	r24, 0xF7	; 247
     180:	80 83       	st	Z, r24
     182:	78 94       	sei
     184:	08 95       	ret

00000186 <__vector_16>:
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cont>
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cont>
     19e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cont_timer>
     1a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cont_timer+0x1>
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cont_timer+0x1>
     1ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cont_timer>
     1b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cont_timer>
     1b4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cont_timer+0x1>
     1b8:	89 2b       	or	r24, r25
     1ba:	51 f4       	brne	.+20     	; 0x1d0 <__vector_16+0x4a>
     1bc:	95 b1       	in	r25, 0x05	; 5
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	89 27       	eor	r24, r25
     1c2:	85 b9       	out	0x05, r24	; 5
     1c4:	84 ef       	ldi	r24, 0xF4	; 244
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cont_timer+0x1>
     1cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cont_timer>
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	0f 90       	pop	r0
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	0f 90       	pop	r0
     1da:	1f 90       	pop	r1
     1dc:	18 95       	reti

000001de <__vector_1>:
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	49 f4       	brne	.+18     	; 0x216 <__vector_1+0x38>
     204:	86 b5       	in	r24, 0x26	; 38
     206:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempinit>
     20a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <cont>
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag>
     214:	33 c0       	rjmp	.+102    	; 0x27c <__vector_1+0x9e>
     216:	86 b5       	in	r24, 0x26	; 38
     218:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <tempfim>
     21c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cont>
     220:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <tempinit>
     224:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <tempfim>
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	98 2f       	mov	r25, r24
     22e:	88 27       	eor	r24, r24
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	25 1b       	sub	r18, r21
     236:	31 09       	sbc	r19, r1
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	84 0f       	add	r24, r20
     23e:	91 1d       	adc	r25, r1
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <tempo+0x1>
     250:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <tempo>
     254:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <tempo>
     258:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <tempo+0x1>
     25c:	af e9       	ldi	r26, 0x9F	; 159
     25e:	b6 e4       	ldi	r27, 0x46	; 70
     260:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__umulhisi3>
     264:	92 95       	swap	r25
     266:	82 95       	swap	r24
     268:	8f 70       	andi	r24, 0x0F	; 15
     26a:	89 27       	eor	r24, r25
     26c:	9f 70       	andi	r25, 0x0F	; 15
     26e:	89 27       	eor	r24, r25
     270:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <dist+0x1>
     274:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <dist>
     278:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <flag>
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	7f 91       	pop	r23
     286:	6f 91       	pop	r22
     288:	5f 91       	pop	r21
     28a:	4f 91       	pop	r20
     28c:	3f 91       	pop	r19
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <__vector_2>:
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
     2ac:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <f_t>
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	81 f4       	brne	.+32     	; 0x2d4 <__vector_2+0x3a>
     2b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     2b8:	e2 eb       	ldi	r30, 0xB2	; 178
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <pulse+0x1>
     2c4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <pulse>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag_t>
     2ce:	10 82       	st	Z, r1
     2d0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <f_t>
     2d4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <f_t>
     2d8:	81 11       	cpse	r24, r1
     2da:	0a c0       	rjmp	.+20     	; 0x2f0 <__vector_2+0x56>
     2dc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     2e0:	e1 eb       	ldi	r30, 0xB1	; 177
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	84 60       	ori	r24, 0x04	; 4
     2e8:	80 83       	st	Z, r24
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <f_t>
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <USARTWriteChar>:
     302:	e0 ec       	ldi	r30, 0xC0	; 192
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	90 81       	ld	r25, Z
     308:	95 ff       	sbrs	r25, 5
     30a:	fd cf       	rjmp	.-6      	; 0x306 <USARTWriteChar+0x4>
     30c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     310:	08 95       	ret

00000312 <send_msg>:
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
     318:	28 81       	ld	r18, Y
     31a:	22 23       	and	r18, r18
     31c:	89 f0       	breq	.+34     	; 0x340 <send_msg+0x2e>
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	e0 ec       	ldi	r30, 0xC0	; 192
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	46 ec       	ldi	r20, 0xC6	; 198
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	90 81       	ld	r25, Z
     32a:	95 ff       	sbrs	r25, 5
     32c:	fd cf       	rjmp	.-6      	; 0x328 <send_msg+0x16>
     32e:	da 01       	movw	r26, r20
     330:	2c 93       	st	X, r18
     332:	3f 5f       	subi	r19, 0xFF	; 255
     334:	de 01       	movw	r26, r28
     336:	a3 0f       	add	r26, r19
     338:	b1 1d       	adc	r27, r1
     33a:	2c 91       	ld	r18, X
     33c:	21 11       	cpse	r18, r1
     33e:	f4 cf       	rjmp	.-24     	; 0x328 <send_msg+0x16>
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <__vector_18>:

ISR(USART_RX_vect){			// Enviar a informação apenas quando alterada
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
	data=UDR0;
     370:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     374:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <data>
	//USARTWriteChar(data);
	if (data=='A')
     378:	81 34       	cpi	r24, 0x41	; 65
     37a:	19 f4       	brne	.+6      	; 0x382 <__vector_18+0x3c>
	aut=OFF;				// Controlado
     37c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <aut>
     380:	93 c0       	rjmp	.+294    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	else if (data=='B')
     382:	82 34       	cpi	r24, 0x42	; 66
     384:	21 f4       	brne	.+8      	; 0x38e <__vector_18+0x48>
	aut=ON;			// Automático
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <aut>
     38c:	8d c0       	rjmp	.+282    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	if (aut==OFF)
     38e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <aut>
     392:	91 11       	cpse	r25, r1
     394:	2f c0       	rjmp	.+94     	; 0x3f4 <__vector_18+0xae>
	{
		switch (data)
     396:	48 2f       	mov	r20, r24
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	fa 01       	movw	r30, r20
     39c:	e3 54       	subi	r30, 0x43	; 67
     39e:	f1 09       	sbc	r31, r1
     3a0:	e2 31       	cpi	r30, 0x12	; 18
     3a2:	f1 05       	cpc	r31, r1
     3a4:	38 f5       	brcc	.+78     	; 0x3f4 <__vector_18+0xae>
     3a6:	ec 5c       	subi	r30, 0xCC	; 204
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__tablejump2__>
		{
			case 'F':
				dir=1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3b4:	67 c0       	rjmp	.+206    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'T':
				dir=2;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3bc:	63 c0       	rjmp	.+198    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'D':
				dir=3;
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3c4:	5f c0       	rjmp	.+190    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'E':
				dir=4;
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3cc:	5b c0       	rjmp	.+182    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'C':	// Frente-direita
				dir=5;
     3ce:	85 e0       	ldi	r24, 0x05	; 5
     3d0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3d4:	57 c0       	rjmp	.+174    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'G':	// Frente-esquerda
				dir=6;
     3d6:	86 e0       	ldi	r24, 0x06	; 6
     3d8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3dc:	53 c0       	rjmp	.+166    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'H':	// Trás-direita
				dir=7;
     3de:	87 e0       	ldi	r24, 0x07	; 7
     3e0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3e4:	4f c0       	rjmp	.+158    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'I':	// Trás-esquerda
				dir=8;
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <dir>
				break;
     3ec:	4b c0       	rjmp	.+150    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'S':	// STOP
				dir=0;
     3ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <dir>
				break;
     3f2:	48 c0       	rjmp	.+144    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}
	}
	if (data=='W'){		// Reset array
     3f4:	87 35       	cpi	r24, 0x57	; 87
     3f6:	71 f4       	brne	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		reset_velo=1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <reset_velo>
		velo[0]='0';
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
     400:	f1 e0       	ldi	r31, 0x01	; 1
     402:	80 e3       	ldi	r24, 0x30	; 48
     404:	80 83       	st	Z, r24
		velo[1]='0';
     406:	81 83       	std	Z+1, r24	; 0x01
		velo[2]=' ';
     408:	80 e2       	ldi	r24, 0x20	; 32
     40a:	82 83       	std	Z+2, r24	; 0x02
		velo[3]=' ';
     40c:	83 83       	std	Z+3, r24	; 0x03
		k=0;
     40e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <k>
     412:	38 c0       	rjmp	.+112    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		}else if (data=='Y'){					// Converte para velocidade
     414:	89 35       	cpi	r24, 0x59	; 89
     416:	b1 f5       	brne	.+108    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		reset_velo=0;
     418:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <reset_velo>
		//k=0;
		velo[0]='0';							// Eliminar o 'W'
     41c:	80 e3       	ldi	r24, 0x30	; 48
     41e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		vel_aux=atoi(velo);						// Converter vetor (string que pode conter numeros) para um inteiro
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 b0 05 	call	0xb60	; 0xb60 <atoi>
     42a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <vel_aux>
		if (vel_aux==0) USARTWriteChar('R');	// ERRO
     42e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <vel_aux>
     432:	81 11       	cpse	r24, r1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	82 e5       	ldi	r24, 0x52	; 82
     438:	0e 94 81 01 	call	0x302	; 0x302 <USARTWriteChar>
		if (vel_aux>0 && vel_aux<128){			// 128 = 6V (Para alimetação de 12 V) 104 = 6 V (Para alimetação de 14.8 V)
     43c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <vel_aux>
     440:	88 23       	and	r24, r24
     442:	49 f0       	breq	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     444:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <vel_aux>
     448:	88 23       	and	r24, r24
     44a:	2c f0       	brlt	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			vel=vel_aux;
     44c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <vel_aux>
     450:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <vel>
     454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}else vel=127;							// Ligeiramente abaixo de 6 V
     456:	8f e7       	ldi	r24, 0x7F	; 127
     458:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <vel>
		for (int t=1; t<=k; t++){
     45c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <k>
     460:	88 23       	and	r24, r24
     462:	81 f0       	breq	.+32     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     464:	01 e0       	ldi	r16, 0x01	; 1
     466:	11 e0       	ldi	r17, 0x01	; 1
     468:	c1 e0       	ldi	r28, 0x01	; 1
     46a:	d0 e0       	ldi	r29, 0x00	; 0
			USARTWriteChar(velo[t]);			// Imprimir velocidade
     46c:	f8 01       	movw	r30, r16
     46e:	81 91       	ld	r24, Z+
     470:	8f 01       	movw	r16, r30
     472:	0e 94 81 01 	call	0x302	; 0x302 <USARTWriteChar>
		vel_aux=atoi(velo);						// Converter vetor (string que pode conter numeros) para um inteiro
		if (vel_aux==0) USARTWriteChar('R');	// ERRO
		if (vel_aux>0 && vel_aux<128){			// 128 = 6V (Para alimetação de 12 V) 104 = 6 V (Para alimetação de 14.8 V)
			vel=vel_aux;
		}else vel=127;							// Ligeiramente abaixo de 6 V
		for (int t=1; t<=k; t++){
     476:	21 96       	adiw	r28, 0x01	; 1
     478:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <k>
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	8c 17       	cp	r24, r28
     480:	9d 07       	cpc	r25, r29
     482:	a4 f7       	brge	.-24     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		//USARTWriteChar(velo[1]);
		//USARTWriteChar(velo[2]);
		//USARTWriteChar(velo[3]);
	}
	if (reset_velo==1){	//Já está resetado o array da velocidade e vai escrever na posição correspondente o recebido em data
     484:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <reset_velo>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	89 f4       	brne	.+34     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		velo[k]=data;	//velo[0]='W'
     48c:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <k>
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	e0 50       	subi	r30, 0x00	; 0
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <data>
     49a:	80 83       	st	Z, r24
		k++;
     49c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <k>
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <k>
	}
}
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	//USARTWriteChar(data);
	if (data=='A')
	aut=OFF;				// Controlado
	else if (data=='B')
	aut=ON;			// Automático
	if (aut==OFF)
     4a8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <aut>
     4ac:	a3 cf       	rjmp	.-186    	; 0x3f4 <__vector_18+0xae>
	}
	if (reset_velo==1){	//Já está resetado o array da velocidade e vai escrever na posição correspondente o recebido em data
		velo[k]=data;	//velo[0]='W'
		k++;
	}
}
     4ae:	ff 91       	pop	r31
     4b0:	ef 91       	pop	r30
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <frente>:
			break;
	}
}

void frente(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     4d8:	85 b1       	in	r24, 0x05	; 5
     4da:	8b 7c       	andi	r24, 0xCB	; 203
     4dc:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     4de:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB5); // FRENTE
	//PORTD &= ~(1<<PIND7);
	PORTB |= (1<<PINB2) | (1<<PINB4);
     4e0:	85 b1       	in	r24, 0x05	; 5
     4e2:	84 61       	ori	r24, 0x14	; 20
     4e4:	85 b9       	out	0x05, r24	; 5
	OCR0A = vel;
     4e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     4ea:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     4ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     4f0:	88 bd       	out	0x28, r24	; 40
     4f2:	08 95       	ret

000004f4 <tras>:
}
void tras(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     4f4:	85 b1       	in	r24, 0x05	; 5
     4f6:	8b 7c       	andi	r24, 0xCB	; 203
     4f8:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     4fa:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB2) & ~(1<<PINB4);	// TRÁS
	PORTB |=  (1<<PINB5);
     4fc:	2d 9a       	sbi	0x05, 5	; 5
	PORTD |= (1<<PIND7);
     4fe:	5f 9a       	sbi	0x0b, 7	; 11
	OCR0A = vel;
     500:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     504:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     506:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     50a:	88 bd       	out	0x28, r24	; 40
     50c:	08 95       	ret

0000050e <direita>:
}
void direita(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     50e:	85 b1       	in	r24, 0x05	; 5
     510:	8b 7c       	andi	r24, 0xCB	; 203
     512:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     514:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB5) & ~(1<<PINB4); // DIREITA
	PORTD |= (1<<PIND7);
     516:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB |= (1<<PINB2);
     518:	2a 9a       	sbi	0x05, 2	; 5
	OCR0A = vel+velesq;
     51a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <velesq>
     51e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     522:	89 0f       	add	r24, r25
     524:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     526:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     52a:	88 bd       	out	0x28, r24	; 40
     52c:	08 95       	ret

0000052e <esquerda>:
}
void esquerda(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     52e:	85 b1       	in	r24, 0x05	; 5
     530:	8b 7c       	andi	r24, 0xCB	; 203
     532:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     534:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB2) // ESQUERDA
	//PORTD &= ~(1<<PIND7);
	PORTB |= (1<<PINB5) | (1<<PINB4);
     536:	85 b1       	in	r24, 0x05	; 5
     538:	80 63       	ori	r24, 0x30	; 48
     53a:	85 b9       	out	0x05, r24	; 5
	OCR0A = vel+velesq;
     53c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <velesq>
     540:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     544:	89 0f       	add	r24, r25
     546:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     548:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     54c:	88 bd       	out	0x28, r24	; 40
     54e:	08 95       	ret

00000550 <frentedireita>:
}
void frentedireita(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     550:	85 b1       	in	r24, 0x05	; 5
     552:	8b 7c       	andi	r24, 0xCB	; 203
     554:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     556:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB5); // FRENTE DIREITA
	//PORTD &= ~(1<<PIND7);
	PORTB |= (1<<PINB2) | (1<<PINB4);
     558:	85 b1       	in	r24, 0x05	; 5
     55a:	84 61       	ori	r24, 0x14	; 20
     55c:	85 b9       	out	0x05, r24	; 5
	OCR0A = vel+pwm(3);
     55e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     562:	89 5f       	subi	r24, 0xF9	; 249
     564:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     566:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     56a:	88 bd       	out	0x28, r24	; 40
     56c:	08 95       	ret

0000056e <frenteesquerda>:
}	
void frenteesquerda(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     56e:	85 b1       	in	r24, 0x05	; 5
     570:	8b 7c       	andi	r24, 0xCB	; 203
     572:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     574:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB5); // FRENTE ESQUERDA
	//PORTD &= ~(1<<PIND7);
	PORTB |= (1<<PINB2) | (1<<PINB4);
     576:	85 b1       	in	r24, 0x05	; 5
     578:	84 61       	ori	r24, 0x14	; 20
     57a:	85 b9       	out	0x05, r24	; 5
	OCR0A = vel;
     57c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     580:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel+pwm(3);
     582:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     586:	89 5f       	subi	r24, 0xF9	; 249
     588:	88 bd       	out	0x28, r24	; 40
     58a:	08 95       	ret

0000058c <trasdireita>:
}
void trasdireita(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     58c:	85 b1       	in	r24, 0x05	; 5
     58e:	8b 7c       	andi	r24, 0xCB	; 203
     590:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     592:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB2) & ~(1<<PINB4);	// TRÁS DIREITA
	PORTB |=  (1<<PINB5);
     594:	2d 9a       	sbi	0x05, 5	; 5
	PORTD |= (1<<PIND7);
     596:	5f 9a       	sbi	0x0b, 7	; 11
	OCR0A = vel+pwm(3)+velesq;
     598:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <velesq>
     59c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     5a0:	89 0f       	add	r24, r25
     5a2:	89 5f       	subi	r24, 0xF9	; 249
     5a4:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel;
     5a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     5aa:	88 bd       	out	0x28, r24	; 40
     5ac:	08 95       	ret

000005ae <trasesquerda>:
}
void trasesquerda(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB4);
     5ae:	85 b1       	in	r24, 0x05	; 5
     5b0:	8b 7c       	andi	r24, 0xCB	; 203
     5b2:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PIND7);
     5b4:	5f 98       	cbi	0x0b, 7	; 11
	//PORTB &= ~(1<<PINB2) & ~(1<<PINB4);	// TRÁS ESQUERDA
	PORTB |=  (1<<PINB5);
     5b6:	2d 9a       	sbi	0x05, 5	; 5
	PORTD |= (1<<PIND7);
     5b8:	5f 9a       	sbi	0x0b, 7	; 11
	OCR0A = vel;
     5ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     5be:	87 bd       	out	0x27, r24	; 39
	OCR0B = vel+pwm(3);
     5c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <vel>
     5c4:	89 5f       	subi	r24, 0xF9	; 249
     5c6:	88 bd       	out	0x28, r24	; 40
     5c8:	08 95       	ret

000005ca <stop>:

}
void stop(){
	PORTB &= ~(1<<PINB5) & ~(1<<PINB2) & ~(1<<PINB3) & ~(1<<PINB4); // PARADO
     5ca:	85 b1       	in	r24, 0x05	; 5
     5cc:	83 7c       	andi	r24, 0xC3	; 195
     5ce:	85 b9       	out	0x05, r24	; 5
	OCR0A = 0;
     5d0:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     5d2:	18 bc       	out	0x28, r1	; 40
     5d4:	08 95       	ret

000005d6 <motores>:
	}
}

void motores()  // PB1 PB2 PB3 PB4
{
	switch (dir)
     5d6:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <dir>
     5da:	8e 2f       	mov	r24, r30
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	89 30       	cpi	r24, 0x09	; 9
     5e0:	91 05       	cpc	r25, r1
     5e2:	f8 f4       	brcc	.+62     	; 0x622 <motores+0x4c>
     5e4:	fc 01       	movw	r30, r24
     5e6:	ea 5b       	subi	r30, 0xBA	; 186
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__tablejump2__>
	{
		case 1:
			frente();
     5ee:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <frente>
			break;
     5f2:	08 95       	ret
		case 2:
			tras();
     5f4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <tras>
			break;
     5f8:	08 95       	ret
		case 3:
			direita();
     5fa:	0e 94 87 02 	call	0x50e	; 0x50e <direita>
			break;
     5fe:	08 95       	ret
		case 4:
			esquerda();
     600:	0e 94 97 02 	call	0x52e	; 0x52e <esquerda>
			break;
     604:	08 95       	ret
		case 5:
			frentedireita();
     606:	0e 94 a8 02 	call	0x550	; 0x550 <frentedireita>
			break;
     60a:	08 95       	ret
		case 6:
			frenteesquerda();
     60c:	0e 94 b7 02 	call	0x56e	; 0x56e <frenteesquerda>
			break;
     610:	08 95       	ret
		case 7:
			trasdireita();
     612:	0e 94 c6 02 	call	0x58c	; 0x58c <trasdireita>
			break;
     616:	08 95       	ret
		case 8:
			trasesquerda();
     618:	0e 94 d7 02 	call	0x5ae	; 0x5ae <trasesquerda>
			break;
     61c:	08 95       	ret
		case 0:
			stop();
     61e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
     622:	08 95       	ret

00000624 <triggersonar>:
}

void triggersonar(){
	//for (int d = 0; d < 5; ++d)
	//{
	PORTD |= (1<<PD4);					// Ativa trigger
     624:	5c 9a       	sbi	0x0b, 4	; 11
	cont_10us=0;						// Cada definição a zero gasta 2 ciclos de clock = 2us
     626:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     62a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     62e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	tempo=0;							// Inicializar variaveis temporais
     632:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <tempo+0x1>
     636:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <tempo>
	tempfim=0;
     63a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <tempfim>
	tempinit=0;
     63e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tempinit>
	PORTD &= (~(1<<PD4));				// Desativa trigger
     642:	5c 98       	cbi	0x0b, 4	; 11
	flag=1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag>
	while(flag!=0){};					// Obtive valor novo de dist
     64a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     64e:	81 11       	cpse	r24, r1
     650:	fc cf       	rjmp	.-8      	; 0x64a <triggersonar+0x26>
	if ((dist<1) || (dist>400)) dist = 400;	// Limite lógico definido para o sonar
     652:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     656:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     65a:	89 2b       	or	r24, r25
     65c:	39 f0       	breq	.+14     	; 0x66c <triggersonar+0x48>
     65e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     662:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     666:	81 39       	cpi	r24, 0x91	; 145
     668:	91 40       	sbci	r25, 0x01	; 1
     66a:	30 f0       	brcs	.+12     	; 0x678 <triggersonar+0x54>
     66c:	80 e9       	ldi	r24, 0x90	; 144
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <dist+0x1>
     674:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <dist>
     678:	08 95       	ret

0000067a <scan_e>:
	//}
	//dist = moda(COUNTA,5);
}

void scan_e(){				// Ativar trigger sonar traseiro esquerda
	PORTC |= (1<<PC0);
     67a:	40 9a       	sbi	0x08, 0	; 8
	cont_10us=0;						// Cada definição a zero gasta 2 ciclos de clock = 2us
     67c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     680:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     684:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;						// Inicializar variaveis temporais para garantir pelo menos 10 us
     688:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     68c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     690:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	PORTC &= (~(1<<PC0));				// Desativa trigger
     694:	40 98       	cbi	0x08, 0	; 8
	while(flag_t==0){};
     696:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <flag_t>
     69a:	88 23       	and	r24, r24
     69c:	e1 f3       	breq	.-8      	; 0x696 <scan_e+0x1c>
	//EICRA|= (1<<ISC11) | (1<<ISC10);	// Subida do sinal gera interrupção (INT1)
	flag_t=0;
     69e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <flag_t>
	f_t=0;
     6a2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <f_t>
	dist_e=(pulse*64)/58;
     6a6:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <pulse>
     6aa:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <pulse+0x1>
     6ae:	00 24       	eor	r0, r0
     6b0:	36 95       	lsr	r19
     6b2:	27 95       	ror	r18
     6b4:	07 94       	ror	r0
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	07 94       	ror	r0
     6bc:	32 2f       	mov	r19, r18
     6be:	20 2d       	mov	r18, r0
     6c0:	af e9       	ldi	r26, 0x9F	; 159
     6c2:	b6 e4       	ldi	r27, 0x46	; 70
     6c4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__umulhisi3>
     6c8:	92 95       	swap	r25
     6ca:	82 95       	swap	r24
     6cc:	8f 70       	andi	r24, 0x0F	; 15
     6ce:	89 27       	eor	r24, r25
     6d0:	9f 70       	andi	r25, 0x0F	; 15
     6d2:	89 27       	eor	r24, r25
     6d4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <dist_e+0x1>
     6d8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <dist_e>
     6dc:	08 95       	ret

000006de <scan_d>:
}
void scan_d(){
	int pulsa=0;
	PORTC &= ~(1<<PORTC1);				// Desligar PORTC1
     6de:	41 98       	cbi	0x08, 1	; 8
	cont_10us=0;
     6e0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	TCNT2=0;
     6e4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	PORTC |= (1<<PORTC1);				// Ligar PORTC1
     6e8:	41 9a       	sbi	0x08, 1	; 8
	cont_10us=0;						// Cada definição a zero gasta 2 ciclos de clock = 2us
     6ea:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     6ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     6f2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;						// Inicializar variaveis temporais para garantir pelo menos 10 us
     6f6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     6fa:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	cont_10us=0;
     6fe:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <cont_10us>
	PORTC &= ~(1<<PORTC1);				// Desligar PORTC1
     702:	41 98       	cbi	0x08, 1	; 8
	while( !(PINC & (1 << PINC2)) );	// Espera que PINC2 tome o valor 1
     704:	32 9b       	sbis	0x06, 2	; 6
     706:	fe cf       	rjmp	.-4      	; 0x704 <scan_d+0x26>
	TCCR2B|= (1<<CS22);                 //LIGAR TIMER
     708:	e1 eb       	ldi	r30, 0xB1	; 177
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	84 60       	ori	r24, 0x04	; 4
     710:	80 83       	st	Z, r24
	while( PINC & (1 << PINC2) );		// Espera que PINC2 tome o valor 0
     712:	32 99       	sbic	0x06, 2	; 6
     714:	fe cf       	rjmp	.-4      	; 0x712 <scan_d+0x34>
	TCCR2B = 0;			                //PARAR TIMER
     716:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	pulsa=TCNT2;						//COPIAR REGISTO DO TIMER
     71a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	dist_d=((pulsa*70)/58)-46;           //Conversão tempo em distância
     71e:	26 e4       	ldi	r18, 0x46	; 70
     720:	82 9f       	mul	r24, r18
     722:	c0 01       	movw	r24, r0
     724:	11 24       	eor	r1, r1
     726:	6a e3       	ldi	r22, 0x3A	; 58
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	0e 94 73 05 	call	0xae6	; 0xae6 <__divmodhi4>
     72e:	6e 52       	subi	r22, 0x2E	; 46
     730:	71 09       	sbc	r23, r1
     732:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <dist_d+0x1>
     736:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <dist_d>
	if (dist_d<=0) dist_d=1;
     73a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <dist_d>
     73e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <dist_d+0x1>
     742:	89 2b       	or	r24, r25
     744:	31 f4       	brne	.+12     	; 0x752 <scan_d+0x74>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <dist_d+0x1>
     74e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <dist_d>
	TCNT2=0;                            // Reiniciar TIMER2 a 0
     752:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     756:	08 95       	ret

00000758 <teste_traseiro>:
}		
*/
void teste_traseiro()
{
	char buff[20];
	if (flag_tras==0){				//flag_tras = 1 já detetou um obstáculo atrás
     758:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     75c:	81 11       	cpse	r24, r1
     75e:	16 c0       	rjmp	.+44     	; 0x78c <teste_traseiro+0x34>
		scan_e();
     760:	0e 94 3d 03 	call	0x67a	; 0x67a <scan_e>
		//itoa(dist_e,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
		//sprintf(buff, "E=%s, ",msg);
		//send_msg(buff);
		if( dist_e < dist_mint)
     764:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <dist_e>
     768:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <dist_e+0x1>
     76c:	4e 97       	sbiw	r24, 0x1e	; 30
     76e:	30 f4       	brcc	.+12     	; 0x77c <teste_traseiro+0x24>
		{
			//USARTWriteChar('E');
			//USARTWriteChar('E');
			//_delay_ms(1000);
			stop();
     770:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
			flag_tras=1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     77a:	08 c0       	rjmp	.+16     	; 0x78c <teste_traseiro+0x34>
		}else{
			tras();
     77c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <tras>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	83 e2       	ldi	r24, 0x23	; 35
     782:	94 ef       	ldi	r25, 0xF4	; 244
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <teste_traseiro+0x2c>
     788:	00 c0       	rjmp	.+0      	; 0x78a <teste_traseiro+0x32>
     78a:	00 00       	nop
			_delay_ms(250);
			//_delay_ms(500);
		}	
	}
	if (flag_tras==0){				//flag_tras = 1 já detetou um obstáculo atrás
     78c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     790:	81 11       	cpse	r24, r1
     792:	16 c0       	rjmp	.+44     	; 0x7c0 <teste_traseiro+0x68>
		scan_d();
     794:	0e 94 6f 03 	call	0x6de	; 0x6de <scan_d>
		//itoa(dist_d,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
		//sprintf(buff, "D=%s, ",msg);
		//send_msg(buff);
		if( dist_d < dist_mint)
     798:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <dist_d>
     79c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <dist_d+0x1>
     7a0:	4e 97       	sbiw	r24, 0x1e	; 30
     7a2:	30 f4       	brcc	.+12     	; 0x7b0 <teste_traseiro+0x58>
		{
			stop();
     7a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
			//USARTWriteChar('D');
			//USARTWriteChar('D');
			//_delay_ms(1000);
			flag_tras=1;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     7ae:	08 95       	ret
			}else{
			tras();
     7b0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <tras>
     7b4:	83 e2       	ldi	r24, 0x23	; 35
     7b6:	94 ef       	ldi	r25, 0xF4	; 244
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <teste_traseiro+0x60>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <teste_traseiro+0x66>
     7be:	00 00       	nop
     7c0:	08 95       	ret

000007c2 <send_dist>:
		}
	}
}

void send_dist(){
	itoa(dist,msg, 10);				// Converte de inteiro para string 10 significa decimal (2 - binario e 16 - hexadecimal)
     7c2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     7c6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     7ca:	4a e0       	ldi	r20, 0x0A	; 10
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	65 e5       	ldi	r22, 0x55	; 85
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <itoa>
	sprintf(msg, "%s , ",msg);
     7d6:	85 e5       	ldi	r24, 0x55	; 85
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	2c e0       	ldi	r18, 0x0C	; 12
     7e0:	31 e0       	ldi	r19, 0x01	; 1
     7e2:	3f 93       	push	r19
     7e4:	2f 93       	push	r18
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	0e 94 06 06 	call	0xc0c	; 0xc0c <sprintf>
	send_msg(msg);
     7ee:	85 e5       	ldi	r24, 0x55	; 85
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 89 01 	call	0x312	; 0x312 <send_msg>
}
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	08 95       	ret

00000804 <main>:

int main(void)
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	64 97       	sbiw	r28, 0x14	; 20
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
	char buff[20],i=0, f_s=0;
	int dist_dir = 0, dist_esq = 0, servo=1850;
	init();
     818:	0e 94 6e 00 	call	0xdc	; 0xdc <init>
	sprintf(msg, "\nAGV READY...... \n");
     81c:	83 e1       	ldi	r24, 0x13	; 19
     81e:	e2 e1       	ldi	r30, 0x12	; 18
     820:	f1 e0       	ldi	r31, 0x01	; 1
     822:	a5 e5       	ldi	r26, 0x55	; 85
     824:	b1 e0       	ldi	r27, 0x01	; 1
     826:	01 90       	ld	r0, Z+
     828:	0d 92       	st	X+, r0
     82a:	8a 95       	dec	r24
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x22>
	send_msg(msg);
     82e:	85 e5       	ldi	r24, 0x55	; 85
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 89 01 	call	0x312	; 0x312 <send_msg>
	/*sprintf(msg, "*RR252G111B3");
	send_msg(msg);
	sprintf(msg, "*LR252G111B3");
	send_msg(msg);*/
	OCR1A=1850;
     836:	8a e3       	ldi	r24, 0x3A	; 58
     838:	97 e0       	ldi	r25, 0x07	; 7
     83a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     83e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}

int main(void)
{
	char buff[20],i=0, f_s=0;
	int dist_dir = 0, dist_esq = 0, servo=1850;
     842:	0f 2e       	mov	r0, r31
     844:	fa e3       	ldi	r31, 0x3A	; 58
     846:	ef 2e       	mov	r14, r31
     848:	f7 e0       	ldi	r31, 0x07	; 7
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	81 2c       	mov	r8, r1
     850:	91 2c       	mov	r9, r1
	send_msg(msg);
}

int main(void)
{
	char buff[20],i=0, f_s=0;
     852:	51 2c       	mov	r5, r1
					//_delay_ms(500);
				}
			}else if ((flag==0)&&(f_avirar==1)){	// Acabou uma leitura do sonar e o AGV está a virar. Este if é responsável por detetar a posição que o AGV vai tomar quando detetar um obstáculo
				if (servo!=1850){					// Se posição do servo quando detetou o obstáculo for diferente do centro
						servo=1850;					
						OCR1A=1850;					// Coloca lo no centro para ler valores "frontais" do AGV
     854:	08 e8       	ldi	r16, 0x88	; 136
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	0f 2e       	mov	r0, r31
     85a:	fa e3       	ldi	r31, 0x3A	; 58
     85c:	cf 2e       	mov	r12, r31
     85e:	f7 e0       	ldi	r31, 0x07	; 7
     860:	df 2e       	mov	r13, r31
     862:	f0 2d       	mov	r31, r0
					OCR1A = 800;				// Sonar direita
					_delay_ms(600);				// Delay mecânico
					//triggersonar();
					triggersonar();
					itoa(dist,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
					sprintf(buff, "DIR=%s, ",msg);
     864:	9e 01       	movw	r18, r28
     866:	2f 5f       	subi	r18, 0xFF	; 255
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	59 01       	movw	r10, r18
					/*if ((dist<1) || (dist>400)){	
						dist_dir = 400;
						}else{
						dist_dir = dist;
					}*/
					f_avirar=1;					// O AGV vai começar a virar
     86c:	44 24       	eor	r4, r4
     86e:	43 94       	inc	r4
					OCR1A = 2800;				// Sonar esquerda
					_delay_ms(600);				// Delay mecânico
					//triggersonar();
					triggersonar();
					itoa(dist,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
					sprintf(buff, "ESQ=%s, ",msg);
     870:	0f 2e       	mov	r0, r31
     872:	fb e2       	ldi	r31, 0x2B	; 43
     874:	2f 2e       	mov	r2, r31
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	3f 2e       	mov	r3, r31
     87a:	f0 2d       	mov	r31, r0
					send_dist();
					//if ((dist>=2) && (dist<40)){
						//triggersonar();
						if ((dist>=2) && (dist<=dist_minf)){
							stop();
							sprintf(buff, "STOP\n",msg);
     87c:	0f 2e       	mov	r0, r31
     87e:	f5 e2       	ldi	r31, 0x25	; 37
     880:	6f 2e       	mov	r6, r31
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	7f 2e       	mov	r7, r31
     886:	f0 2d       	mov	r31, r0
		itoa(dist,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
		sprintf(buff, "F=%s, ",msg);
		send_msg(buff);
	}*/
	while (1) {	
		if (aut==ON){					// AUTOMÁTICO
     888:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <aut>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f0       	breq	.+2      	; 0x892 <main+0x8e>
     890:	1d c1       	rjmp	.+570    	; 0xacc <__stack+0x1cd>
			if ((flag==0)&&(f_avirar==0)){				// Acabou uma leitura do sonar e o AGV não está a virar
     892:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     896:	81 11       	cpse	r24, r1
     898:	f7 c0       	rjmp	.+494    	; 0xa88 <__stack+0x189>
     89a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <f_avirar>
     89e:	81 11       	cpse	r24, r1
     8a0:	f3 c0       	rjmp	.+486    	; 0xa88 <__stack+0x189>
				if (direcao == 0){		// Em frente	
     8a2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <direcao>
     8a6:	81 11       	cpse	r24, r1
     8a8:	65 c0       	rjmp	.+202    	; 0x974 <__stack+0x75>
					i++;
     8aa:	53 94       	inc	r5
					if(i==4){			// Roda o servo constantemente (ao fim de 50 ciclos) para a seguinte posição
     8ac:	34 e0       	ldi	r19, 0x04	; 4
     8ae:	53 12       	cpse	r5, r19
     8b0:	28 c0       	rjmp	.+80     	; 0x902 <__stack+0x3>
						i=0;
						f_s=1;			// Flag que indica que servo vai rodar
						if(OCR1A==2100){
     8b2:	f8 01       	movw	r30, r16
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	84 33       	cpi	r24, 0x34	; 52
     8ba:	98 40       	sbci	r25, 0x08	; 8
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <main+0xc2>
							OCR1A=1850;
     8be:	f8 01       	movw	r30, r16
     8c0:	d1 82       	std	Z+1, r13	; 0x01
     8c2:	c0 82       	st	Z, r12
     8c4:	06 c1       	rjmp	.+524    	; 0xad2 <__stack+0x1d3>
						}else if(OCR1A==1850){
     8c6:	f8 01       	movw	r30, r16
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	8a 33       	cpi	r24, 0x3A	; 58
     8ce:	97 40       	sbci	r25, 0x07	; 7
     8d0:	a1 f4       	brne	.+40     	; 0x8fa <main+0xf6>
							if (flag_servo==0){
     8d2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <flag_servo>
     8d6:	81 11       	cpse	r24, r1
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <main+0xe6>
								flag_servo=1;
     8da:	40 92 44 01 	sts	0x0144, r4	; 0x800144 <flag_servo>
								OCR1A=1600;
     8de:	20 e4       	ldi	r18, 0x40	; 64
     8e0:	36 e0       	ldi	r19, 0x06	; 6
     8e2:	f8 01       	movw	r30, r16
     8e4:	31 83       	std	Z+1, r19	; 0x01
     8e6:	20 83       	st	Z, r18
     8e8:	f4 c0       	rjmp	.+488    	; 0xad2 <__stack+0x1d3>
							}else{
								flag_servo=0;
     8ea:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <flag_servo>
								OCR1A=2100;
     8ee:	24 e3       	ldi	r18, 0x34	; 52
     8f0:	38 e0       	ldi	r19, 0x08	; 8
     8f2:	f8 01       	movw	r30, r16
     8f4:	31 83       	std	Z+1, r19	; 0x01
     8f6:	20 83       	st	Z, r18
     8f8:	ec c0       	rjmp	.+472    	; 0xad2 <__stack+0x1d3>
							} 
						}else{
							OCR1A=1850;
     8fa:	f8 01       	movw	r30, r16
     8fc:	d1 82       	std	Z+1, r13	; 0x01
     8fe:	c0 82       	st	Z, r12
     900:	e8 c0       	rjmp	.+464    	; 0xad2 <__stack+0x1d3>
						}
					}
					frente();
     902:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <frente>
					if (f_s==1){		// Delay mecanico da rotação do servo necessário
						_delay_ms(250);
						f_s=0;
					}
					//triggersonar();
					triggersonar();
     906:	0e 94 12 03 	call	0x624	; 0x624 <triggersonar>
					send_dist();
     90a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <send_dist>
					//if ((dist>=2) && (dist<40)){
						//triggersonar();
						if ((dist>=2) && (dist<=dist_minf)){
     90e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     912:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     916:	02 97       	sbiw	r24, 0x02	; 2
     918:	08 f4       	brcc	.+2      	; 0x91c <__stack+0x1d>
     91a:	b6 cf       	rjmp	.-148    	; 0x888 <main+0x84>
     91c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     920:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     924:	c3 97       	sbiw	r24, 0x33	; 51
     926:	08 f0       	brcs	.+2      	; 0x92a <__stack+0x2b>
     928:	af cf       	rjmp	.-162    	; 0x888 <main+0x84>
							stop();
     92a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
							sprintf(buff, "STOP\n",msg);
     92e:	85 e5       	ldi	r24, 0x55	; 85
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	7f 92       	push	r7
     938:	6f 92       	push	r6
     93a:	bf 92       	push	r11
     93c:	af 92       	push	r10
     93e:	0e 94 06 06 	call	0xc0c	; 0xc0c <sprintf>
							send_msg(buff);
     942:	c5 01       	movw	r24, r10
     944:	0e 94 89 01 	call	0x312	; 0x312 <send_msg>
							//USARTWriteChar('S');
							direcao=1;
     948:	40 92 3f 01 	sts	0x013F, r4	; 0x80013f <direcao>
							flag_tras=0;		// Inicializa a flag para permitir leitura atrás
     94c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
							teste_traseiro();
     950:	0e 94 ac 03 	call	0x758	; 0x758 <teste_traseiro>
							teste_traseiro();	
     954:	0e 94 ac 03 	call	0x758	; 0x758 <teste_traseiro>
							flag_tras=0;		// Inicializa a flag para permitir leitura atrás
     958:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
							//USARTWriteChar('B');
							//tras();		
							//_delay_ms(1000);	// Tempo de deslocamento para trás
							servo=OCR1A;		// Guarda posição do servo para ser processada
     95c:	f8 01       	movw	r30, r16
     95e:	e0 80       	ld	r14, Z
     960:	f1 80       	ldd	r15, Z+1	; 0x01
							stop();
     962:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	8a cf       	rjmp	.-236    	; 0x888 <main+0x84>
						}
					//}
				}else if (direcao == 1){
     974:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <direcao>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	a9 f5       	brne	.+106    	; 0x9e6 <__stack+0xe7>
					OCR1A = 2800;				// Sonar esquerda
     97c:	20 ef       	ldi	r18, 0xF0	; 240
     97e:	3a e0       	ldi	r19, 0x0A	; 10
     980:	f8 01       	movw	r30, r16
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	20 83       	st	Z, r18
     986:	3f eb       	ldi	r19, 0xBF	; 191
     988:	44 ed       	ldi	r20, 0xD4	; 212
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	31 50       	subi	r19, 0x01	; 1
     98e:	40 40       	sbci	r20, 0x00	; 0
     990:	80 40       	sbci	r24, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <__stack+0x8d>
     994:	00 c0       	rjmp	.+0      	; 0x996 <__stack+0x97>
     996:	00 00       	nop
					_delay_ms(600);				// Delay mecânico
					//triggersonar();
					triggersonar();
     998:	0e 94 12 03 	call	0x624	; 0x624 <triggersonar>
					itoa(dist,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
     99c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     9a0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     9a4:	4a e0       	ldi	r20, 0x0A	; 10
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	65 e5       	ldi	r22, 0x55	; 85
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	0e 94 ce 05 	call	0xb9c	; 0xb9c <itoa>
					sprintf(buff, "ESQ=%s, ",msg);
     9b0:	85 e5       	ldi	r24, 0x55	; 85
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	3f 92       	push	r3
     9ba:	2f 92       	push	r2
     9bc:	bf 92       	push	r11
     9be:	af 92       	push	r10
     9c0:	0e 94 06 06 	call	0xc0c	; 0xc0c <sprintf>
					send_msg(buff);
     9c4:	c5 01       	movw	r24, r10
     9c6:	0e 94 89 01 	call	0x312	; 0x312 <send_msg>
					dist_esq = dist;
     9ca:	80 90 51 01 	lds	r8, 0x0151	; 0x800151 <dist>
     9ce:	90 90 52 01 	lds	r9, 0x0152	; 0x800152 <dist+0x1>
					/*if ((dist<1) || (dist>400)){
						dist_esq = 400;
					}else{ 
						dist_esq = dist;
					}*/
					direcao=2;					
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <direcao>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	51 cf       	rjmp	.-350    	; 0x888 <main+0x84>
				}else if (direcao == 2){	
     9e6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <direcao>
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	4c cf       	rjmp	.-360    	; 0x888 <main+0x84>
					OCR1A = 800;				// Sonar direita
     9f0:	20 e2       	ldi	r18, 0x20	; 32
     9f2:	33 e0       	ldi	r19, 0x03	; 3
     9f4:	f8 01       	movw	r30, r16
     9f6:	31 83       	std	Z+1, r19	; 0x01
     9f8:	20 83       	st	Z, r18
     9fa:	3f eb       	ldi	r19, 0xBF	; 191
     9fc:	44 ed       	ldi	r20, 0xD4	; 212
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	31 50       	subi	r19, 0x01	; 1
     a02:	40 40       	sbci	r20, 0x00	; 0
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x101>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <__stack+0x10b>
     a0a:	00 00       	nop
					_delay_ms(600);				// Delay mecânico
					//triggersonar();
					triggersonar();
     a0c:	0e 94 12 03 	call	0x624	; 0x624 <triggersonar>
					itoa(dist,msg, 10);			// Converte de inteiro para string, 10 significa decimal (2 - binario e 16 - hexadecimal)
     a10:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     a14:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     a18:	4a e0       	ldi	r20, 0x0A	; 10
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	65 e5       	ldi	r22, 0x55	; 85
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	0e 94 ce 05 	call	0xb9c	; 0xb9c <itoa>
					sprintf(buff, "DIR=%s, ",msg);
     a24:	85 e5       	ldi	r24, 0x55	; 85
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	e4 e3       	ldi	r30, 0x34	; 52
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	ff 93       	push	r31
     a32:	ef 93       	push	r30
     a34:	bf 92       	push	r11
     a36:	af 92       	push	r10
     a38:	0e 94 06 06 	call	0xc0c	; 0xc0c <sprintf>
					send_msg(buff);
     a3c:	c5 01       	movw	r24, r10
     a3e:	0e 94 89 01 	call	0x312	; 0x312 <send_msg>
					dist_dir = dist;
     a42:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     a46:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
					/*if ((dist<1) || (dist>400)){	
						dist_dir = 400;
						}else{
						dist_dir = dist;
					}*/
					f_avirar=1;					// O AGV vai começar a virar
     a4a:	40 92 45 01 	sts	0x0145, r4	; 0x800145 <f_avirar>
					direcao = 0;
     a4e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <direcao>
					OCR1A = servo;				// Servo continua na posição antes do sonar detetar um objeto
     a52:	f8 01       	movw	r30, r16
     a54:	f1 82       	std	Z+1, r15	; 0x01
     a56:	e0 82       	st	Z, r14
     a58:	ff e7       	ldi	r31, 0x7F	; 127
     a5a:	28 e3       	ldi	r18, 0x38	; 56
     a5c:	31 e0       	ldi	r19, 0x01	; 1
     a5e:	f1 50       	subi	r31, 0x01	; 1
     a60:	20 40       	sbci	r18, 0x00	; 0
     a62:	30 40       	sbci	r19, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <__stack+0x15f>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <__stack+0x169>
     a68:	00 00       	nop
					_delay_ms(400);				// Delay mecanico
					if (dist_dir >= dist_esq){
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	88 15       	cp	r24, r8
     a78:	99 05       	cpc	r25, r9
     a7a:	1c f0       	brlt	.+6      	; 0xa82 <__stack+0x183>
						direita();
     a7c:	0e 94 87 02 	call	0x50e	; 0x50e <direita>
     a80:	03 cf       	rjmp	.-506    	; 0x888 <main+0x84>
						//USARTWriteChar('D');
					}else {
						esquerda();
     a82:	0e 94 97 02 	call	0x52e	; 0x52e <esquerda>
     a86:	00 cf       	rjmp	.-512    	; 0x888 <main+0x84>
						//USARTWriteChar('E');
					} 
					//_delay_ms(500);
				}
			}else if ((flag==0)&&(f_avirar==1)){	// Acabou uma leitura do sonar e o AGV está a virar. Este if é responsável por detetar a posição que o AGV vai tomar quando detetar um obstáculo
     a88:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     a8c:	81 11       	cpse	r24, r1
     a8e:	fc ce       	rjmp	.-520    	; 0x888 <main+0x84>
     a90:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <f_avirar>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	09 f0       	breq	.+2      	; 0xa9a <__stack+0x19b>
     a98:	f7 ce       	rjmp	.-530    	; 0x888 <main+0x84>
				if (servo!=1850){					// Se posição do servo quando detetou o obstáculo for diferente do centro
     a9a:	4a e3       	ldi	r20, 0x3A	; 58
     a9c:	e4 16       	cp	r14, r20
     a9e:	47 e0       	ldi	r20, 0x07	; 7
     aa0:	f4 06       	cpc	r15, r20
     aa2:	29 f0       	breq	.+10     	; 0xaae <__stack+0x1af>
						servo=1850;					
						OCR1A=1850;					// Coloca lo no centro para ler valores "frontais" do AGV
     aa4:	f8 01       	movw	r30, r16
     aa6:	d1 82       	std	Z+1, r13	; 0x01
     aa8:	c0 82       	st	Z, r12
					} 
					//_delay_ms(500);
				}
			}else if ((flag==0)&&(f_avirar==1)){	// Acabou uma leitura do sonar e o AGV está a virar. Este if é responsável por detetar a posição que o AGV vai tomar quando detetar um obstáculo
				if (servo!=1850){					// Se posição do servo quando detetou o obstáculo for diferente do centro
						servo=1850;					
     aaa:	76 01       	movw	r14, r12
     aac:	ed ce       	rjmp	.-550    	; 0x888 <main+0x84>
						OCR1A=1850;					// Coloca lo no centro para ler valores "frontais" do AGV
						//_delay_ms(2000);					
						//USARTWriteChar('A');
				}else{
					triggersonar();					// Se posição do servo quando detetou o obstáculo for a do centro faz as leituras necessárias até encontrar a posição que respeite a próxima condição
     aae:	0e 94 12 03 	call	0x624	; 0x624 <triggersonar>
					if (dist>=120){
     ab2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <dist>
     ab6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <dist+0x1>
     aba:	88 37       	cpi	r24, 0x78	; 120
     abc:	91 05       	cpc	r25, r1
     abe:	08 f4       	brcc	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	e3 ce       	rjmp	.-570    	; 0x888 <main+0x84>
						f_avirar=0;					// O AGV detetou melhor caminho
     ac2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <f_avirar>
						stop();						// O AGV para de virar
     ac6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <stop>
     aca:	de ce       	rjmp	.-580    	; 0x888 <main+0x84>
					}
				}
			}
			
		}else{			// CONTROLO REMOTO
			motores();	
     acc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <motores>
     ad0:	db ce       	rjmp	.-586    	; 0x888 <main+0x84>
							} 
						}else{
							OCR1A=1850;
						}
					}
					frente();
     ad2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <frente>
     ad6:	83 e2       	ldi	r24, 0x23	; 35
     ad8:	94 ef       	ldi	r25, 0xF4	; 244
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <__stack+0x1db>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <__stack+0x1e1>
     ae0:	00 00       	nop
     ae2:	51 2c       	mov	r5, r1
     ae4:	10 cf       	rjmp	.-480    	; 0x906 <__stack+0x7>

00000ae6 <__divmodhi4>:
     ae6:	97 fb       	bst	r25, 7
     ae8:	07 2e       	mov	r0, r23
     aea:	16 f4       	brtc	.+4      	; 0xaf0 <__divmodhi4+0xa>
     aec:	00 94       	com	r0
     aee:	07 d0       	rcall	.+14     	; 0xafe <__divmodhi4_neg1>
     af0:	77 fd       	sbrc	r23, 7
     af2:	09 d0       	rcall	.+18     	; 0xb06 <__divmodhi4_neg2>
     af4:	0e 94 9c 05 	call	0xb38	; 0xb38 <__udivmodhi4>
     af8:	07 fc       	sbrc	r0, 7
     afa:	05 d0       	rcall	.+10     	; 0xb06 <__divmodhi4_neg2>
     afc:	3e f4       	brtc	.+14     	; 0xb0c <__divmodhi4_exit>

00000afe <__divmodhi4_neg1>:
     afe:	90 95       	com	r25
     b00:	81 95       	neg	r24
     b02:	9f 4f       	sbci	r25, 0xFF	; 255
     b04:	08 95       	ret

00000b06 <__divmodhi4_neg2>:
     b06:	70 95       	com	r23
     b08:	61 95       	neg	r22
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b0c <__divmodhi4_exit>:
     b0c:	08 95       	ret

00000b0e <__tablejump2__>:
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	05 90       	lpm	r0, Z+
     b14:	f4 91       	lpm	r31, Z
     b16:	e0 2d       	mov	r30, r0
     b18:	09 94       	ijmp

00000b1a <__umulhisi3>:
     b1a:	a2 9f       	mul	r26, r18
     b1c:	b0 01       	movw	r22, r0
     b1e:	b3 9f       	mul	r27, r19
     b20:	c0 01       	movw	r24, r0
     b22:	a3 9f       	mul	r26, r19
     b24:	70 0d       	add	r23, r0
     b26:	81 1d       	adc	r24, r1
     b28:	11 24       	eor	r1, r1
     b2a:	91 1d       	adc	r25, r1
     b2c:	b2 9f       	mul	r27, r18
     b2e:	70 0d       	add	r23, r0
     b30:	81 1d       	adc	r24, r1
     b32:	11 24       	eor	r1, r1
     b34:	91 1d       	adc	r25, r1
     b36:	08 95       	ret

00000b38 <__udivmodhi4>:
     b38:	aa 1b       	sub	r26, r26
     b3a:	bb 1b       	sub	r27, r27
     b3c:	51 e1       	ldi	r21, 0x11	; 17
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <__udivmodhi4_ep>

00000b40 <__udivmodhi4_loop>:
     b40:	aa 1f       	adc	r26, r26
     b42:	bb 1f       	adc	r27, r27
     b44:	a6 17       	cp	r26, r22
     b46:	b7 07       	cpc	r27, r23
     b48:	10 f0       	brcs	.+4      	; 0xb4e <__udivmodhi4_ep>
     b4a:	a6 1b       	sub	r26, r22
     b4c:	b7 0b       	sbc	r27, r23

00000b4e <__udivmodhi4_ep>:
     b4e:	88 1f       	adc	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	5a 95       	dec	r21
     b54:	a9 f7       	brne	.-22     	; 0xb40 <__udivmodhi4_loop>
     b56:	80 95       	com	r24
     b58:	90 95       	com	r25
     b5a:	bc 01       	movw	r22, r24
     b5c:	cd 01       	movw	r24, r26
     b5e:	08 95       	ret

00000b60 <atoi>:
     b60:	fc 01       	movw	r30, r24
     b62:	88 27       	eor	r24, r24
     b64:	99 27       	eor	r25, r25
     b66:	e8 94       	clt
     b68:	21 91       	ld	r18, Z+
     b6a:	20 32       	cpi	r18, 0x20	; 32
     b6c:	e9 f3       	breq	.-6      	; 0xb68 <atoi+0x8>
     b6e:	29 30       	cpi	r18, 0x09	; 9
     b70:	10 f0       	brcs	.+4      	; 0xb76 <atoi+0x16>
     b72:	2e 30       	cpi	r18, 0x0E	; 14
     b74:	c8 f3       	brcs	.-14     	; 0xb68 <atoi+0x8>
     b76:	2b 32       	cpi	r18, 0x2B	; 43
     b78:	41 f0       	breq	.+16     	; 0xb8a <atoi+0x2a>
     b7a:	2d 32       	cpi	r18, 0x2D	; 45
     b7c:	39 f4       	brne	.+14     	; 0xb8c <atoi+0x2c>
     b7e:	68 94       	set
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <atoi+0x2a>
     b82:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__mulhi_const_10>
     b86:	82 0f       	add	r24, r18
     b88:	91 1d       	adc	r25, r1
     b8a:	21 91       	ld	r18, Z+
     b8c:	20 53       	subi	r18, 0x30	; 48
     b8e:	2a 30       	cpi	r18, 0x0A	; 10
     b90:	c0 f3       	brcs	.-16     	; 0xb82 <atoi+0x22>
     b92:	1e f4       	brtc	.+6      	; 0xb9a <atoi+0x3a>
     b94:	90 95       	com	r25
     b96:	81 95       	neg	r24
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	08 95       	ret

00000b9c <itoa>:
     b9c:	45 32       	cpi	r20, 0x25	; 37
     b9e:	51 05       	cpc	r21, r1
     ba0:	20 f4       	brcc	.+8      	; 0xbaa <itoa+0xe>
     ba2:	42 30       	cpi	r20, 0x02	; 2
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <itoa+0xe>
     ba6:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__itoa_ncheck>
     baa:	fb 01       	movw	r30, r22
     bac:	10 82       	st	Z, r1
     bae:	cb 01       	movw	r24, r22
     bb0:	08 95       	ret

00000bb2 <__itoa_ncheck>:
     bb2:	bb 27       	eor	r27, r27
     bb4:	4a 30       	cpi	r20, 0x0A	; 10
     bb6:	31 f4       	brne	.+12     	; 0xbc4 <__itoa_ncheck+0x12>
     bb8:	99 23       	and	r25, r25
     bba:	22 f4       	brpl	.+8      	; 0xbc4 <__itoa_ncheck+0x12>
     bbc:	bd e2       	ldi	r27, 0x2D	; 45
     bbe:	90 95       	com	r25
     bc0:	81 95       	neg	r24
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__utoa_common>

00000bc8 <__mulhi_const_10>:
     bc8:	7a e0       	ldi	r23, 0x0A	; 10
     bca:	97 9f       	mul	r25, r23
     bcc:	90 2d       	mov	r25, r0
     bce:	87 9f       	mul	r24, r23
     bd0:	80 2d       	mov	r24, r0
     bd2:	91 0d       	add	r25, r1
     bd4:	11 24       	eor	r1, r1
     bd6:	08 95       	ret

00000bd8 <__utoa_ncheck>:
     bd8:	bb 27       	eor	r27, r27

00000bda <__utoa_common>:
     bda:	fb 01       	movw	r30, r22
     bdc:	55 27       	eor	r21, r21
     bde:	aa 27       	eor	r26, r26
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	aa 1f       	adc	r26, r26
     be6:	a4 17       	cp	r26, r20
     be8:	10 f0       	brcs	.+4      	; 0xbee <__utoa_common+0x14>
     bea:	a4 1b       	sub	r26, r20
     bec:	83 95       	inc	r24
     bee:	50 51       	subi	r21, 0x10	; 16
     bf0:	b9 f7       	brne	.-18     	; 0xbe0 <__utoa_common+0x6>
     bf2:	a0 5d       	subi	r26, 0xD0	; 208
     bf4:	aa 33       	cpi	r26, 0x3A	; 58
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <__utoa_common+0x20>
     bf8:	a9 5d       	subi	r26, 0xD9	; 217
     bfa:	a1 93       	st	Z+, r26
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	79 f7       	brne	.-34     	; 0xbde <__utoa_common+0x4>
     c00:	b1 11       	cpse	r27, r1
     c02:	b1 93       	st	Z+, r27
     c04:	11 92       	st	Z+, r1
     c06:	cb 01       	movw	r24, r22
     c08:	0c 94 1f 08 	jmp	0x103e	; 0x103e <strrev>

00000c0c <sprintf>:
     c0c:	ae e0       	ldi	r26, 0x0E	; 14
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ec e0       	ldi	r30, 0x0C	; 12
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__prologue_saves__+0x1c>
     c18:	0d 89       	ldd	r16, Y+21	; 0x15
     c1a:	1e 89       	ldd	r17, Y+22	; 0x16
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	8c 83       	std	Y+4, r24	; 0x04
     c20:	1a 83       	std	Y+2, r17	; 0x02
     c22:	09 83       	std	Y+1, r16	; 0x01
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	9f e7       	ldi	r25, 0x7F	; 127
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	ae 01       	movw	r20, r28
     c2e:	47 5e       	subi	r20, 0xE7	; 231
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	6f 89       	ldd	r22, Y+23	; 0x17
     c34:	78 8d       	ldd	r23, Y+24	; 0x18
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <vfprintf>
     c3e:	ef 81       	ldd	r30, Y+7	; 0x07
     c40:	f8 85       	ldd	r31, Y+8	; 0x08
     c42:	e0 0f       	add	r30, r16
     c44:	f1 1f       	adc	r31, r17
     c46:	10 82       	st	Z, r1
     c48:	2e 96       	adiw	r28, 0x0e	; 14
     c4a:	e4 e0       	ldi	r30, 0x04	; 4
     c4c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__epilogue_restores__+0x1c>

00000c50 <vfprintf>:
     c50:	ab e0       	ldi	r26, 0x0B	; 11
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e2       	ldi	r30, 0x2E	; 46
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__prologue_saves__>
     c5c:	6c 01       	movw	r12, r24
     c5e:	7b 01       	movw	r14, r22
     c60:	8a 01       	movw	r16, r20
     c62:	fc 01       	movw	r30, r24
     c64:	17 82       	std	Z+7, r1	; 0x07
     c66:	16 82       	std	Z+6, r1	; 0x06
     c68:	83 81       	ldd	r24, Z+3	; 0x03
     c6a:	81 ff       	sbrs	r24, 1
     c6c:	cc c1       	rjmp	.+920    	; 0x1006 <vfprintf+0x3b6>
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	3c 01       	movw	r6, r24
     c74:	f6 01       	movw	r30, r12
     c76:	93 81       	ldd	r25, Z+3	; 0x03
     c78:	f7 01       	movw	r30, r14
     c7a:	93 fd       	sbrc	r25, 3
     c7c:	85 91       	lpm	r24, Z+
     c7e:	93 ff       	sbrs	r25, 3
     c80:	81 91       	ld	r24, Z+
     c82:	7f 01       	movw	r14, r30
     c84:	88 23       	and	r24, r24
     c86:	09 f4       	brne	.+2      	; 0xc8a <vfprintf+0x3a>
     c88:	ba c1       	rjmp	.+884    	; 0xffe <vfprintf+0x3ae>
     c8a:	85 32       	cpi	r24, 0x25	; 37
     c8c:	39 f4       	brne	.+14     	; 0xc9c <vfprintf+0x4c>
     c8e:	93 fd       	sbrc	r25, 3
     c90:	85 91       	lpm	r24, Z+
     c92:	93 ff       	sbrs	r25, 3
     c94:	81 91       	ld	r24, Z+
     c96:	7f 01       	movw	r14, r30
     c98:	85 32       	cpi	r24, 0x25	; 37
     c9a:	29 f4       	brne	.+10     	; 0xca6 <vfprintf+0x56>
     c9c:	b6 01       	movw	r22, r12
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     ca4:	e7 cf       	rjmp	.-50     	; 0xc74 <vfprintf+0x24>
     ca6:	91 2c       	mov	r9, r1
     ca8:	21 2c       	mov	r2, r1
     caa:	31 2c       	mov	r3, r1
     cac:	ff e1       	ldi	r31, 0x1F	; 31
     cae:	f3 15       	cp	r31, r3
     cb0:	d8 f0       	brcs	.+54     	; 0xce8 <vfprintf+0x98>
     cb2:	8b 32       	cpi	r24, 0x2B	; 43
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <vfprintf+0x84>
     cb6:	38 f4       	brcc	.+14     	; 0xcc6 <vfprintf+0x76>
     cb8:	80 32       	cpi	r24, 0x20	; 32
     cba:	79 f0       	breq	.+30     	; 0xcda <vfprintf+0x8a>
     cbc:	83 32       	cpi	r24, 0x23	; 35
     cbe:	a1 f4       	brne	.+40     	; 0xce8 <vfprintf+0x98>
     cc0:	23 2d       	mov	r18, r3
     cc2:	20 61       	ori	r18, 0x10	; 16
     cc4:	1d c0       	rjmp	.+58     	; 0xd00 <vfprintf+0xb0>
     cc6:	8d 32       	cpi	r24, 0x2D	; 45
     cc8:	61 f0       	breq	.+24     	; 0xce2 <vfprintf+0x92>
     cca:	80 33       	cpi	r24, 0x30	; 48
     ccc:	69 f4       	brne	.+26     	; 0xce8 <vfprintf+0x98>
     cce:	23 2d       	mov	r18, r3
     cd0:	21 60       	ori	r18, 0x01	; 1
     cd2:	16 c0       	rjmp	.+44     	; 0xd00 <vfprintf+0xb0>
     cd4:	83 2d       	mov	r24, r3
     cd6:	82 60       	ori	r24, 0x02	; 2
     cd8:	38 2e       	mov	r3, r24
     cda:	e3 2d       	mov	r30, r3
     cdc:	e4 60       	ori	r30, 0x04	; 4
     cde:	3e 2e       	mov	r3, r30
     ce0:	2a c0       	rjmp	.+84     	; 0xd36 <vfprintf+0xe6>
     ce2:	f3 2d       	mov	r31, r3
     ce4:	f8 60       	ori	r31, 0x08	; 8
     ce6:	1d c0       	rjmp	.+58     	; 0xd22 <vfprintf+0xd2>
     ce8:	37 fc       	sbrc	r3, 7
     cea:	2d c0       	rjmp	.+90     	; 0xd46 <vfprintf+0xf6>
     cec:	20 ed       	ldi	r18, 0xD0	; 208
     cee:	28 0f       	add	r18, r24
     cf0:	2a 30       	cpi	r18, 0x0A	; 10
     cf2:	40 f0       	brcs	.+16     	; 0xd04 <vfprintf+0xb4>
     cf4:	8e 32       	cpi	r24, 0x2E	; 46
     cf6:	b9 f4       	brne	.+46     	; 0xd26 <vfprintf+0xd6>
     cf8:	36 fc       	sbrc	r3, 6
     cfa:	81 c1       	rjmp	.+770    	; 0xffe <vfprintf+0x3ae>
     cfc:	23 2d       	mov	r18, r3
     cfe:	20 64       	ori	r18, 0x40	; 64
     d00:	32 2e       	mov	r3, r18
     d02:	19 c0       	rjmp	.+50     	; 0xd36 <vfprintf+0xe6>
     d04:	36 fe       	sbrs	r3, 6
     d06:	06 c0       	rjmp	.+12     	; 0xd14 <vfprintf+0xc4>
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	98 9e       	mul	r9, r24
     d0c:	20 0d       	add	r18, r0
     d0e:	11 24       	eor	r1, r1
     d10:	92 2e       	mov	r9, r18
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <vfprintf+0xe6>
     d14:	ea e0       	ldi	r30, 0x0A	; 10
     d16:	2e 9e       	mul	r2, r30
     d18:	20 0d       	add	r18, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	22 2e       	mov	r2, r18
     d1e:	f3 2d       	mov	r31, r3
     d20:	f0 62       	ori	r31, 0x20	; 32
     d22:	3f 2e       	mov	r3, r31
     d24:	08 c0       	rjmp	.+16     	; 0xd36 <vfprintf+0xe6>
     d26:	8c 36       	cpi	r24, 0x6C	; 108
     d28:	21 f4       	brne	.+8      	; 0xd32 <vfprintf+0xe2>
     d2a:	83 2d       	mov	r24, r3
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	38 2e       	mov	r3, r24
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <vfprintf+0xe6>
     d32:	88 36       	cpi	r24, 0x68	; 104
     d34:	41 f4       	brne	.+16     	; 0xd46 <vfprintf+0xf6>
     d36:	f7 01       	movw	r30, r14
     d38:	93 fd       	sbrc	r25, 3
     d3a:	85 91       	lpm	r24, Z+
     d3c:	93 ff       	sbrs	r25, 3
     d3e:	81 91       	ld	r24, Z+
     d40:	7f 01       	movw	r14, r30
     d42:	81 11       	cpse	r24, r1
     d44:	b3 cf       	rjmp	.-154    	; 0xcac <vfprintf+0x5c>
     d46:	98 2f       	mov	r25, r24
     d48:	9f 7d       	andi	r25, 0xDF	; 223
     d4a:	95 54       	subi	r25, 0x45	; 69
     d4c:	93 30       	cpi	r25, 0x03	; 3
     d4e:	28 f4       	brcc	.+10     	; 0xd5a <vfprintf+0x10a>
     d50:	0c 5f       	subi	r16, 0xFC	; 252
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	9f e3       	ldi	r25, 0x3F	; 63
     d56:	99 83       	std	Y+1, r25	; 0x01
     d58:	0d c0       	rjmp	.+26     	; 0xd74 <vfprintf+0x124>
     d5a:	83 36       	cpi	r24, 0x63	; 99
     d5c:	31 f0       	breq	.+12     	; 0xd6a <vfprintf+0x11a>
     d5e:	83 37       	cpi	r24, 0x73	; 115
     d60:	71 f0       	breq	.+28     	; 0xd7e <vfprintf+0x12e>
     d62:	83 35       	cpi	r24, 0x53	; 83
     d64:	09 f0       	breq	.+2      	; 0xd68 <vfprintf+0x118>
     d66:	59 c0       	rjmp	.+178    	; 0xe1a <vfprintf+0x1ca>
     d68:	21 c0       	rjmp	.+66     	; 0xdac <vfprintf+0x15c>
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 81       	ld	r24, Z
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	0e 5f       	subi	r16, 0xFE	; 254
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	88 24       	eor	r8, r8
     d76:	83 94       	inc	r8
     d78:	91 2c       	mov	r9, r1
     d7a:	53 01       	movw	r10, r6
     d7c:	13 c0       	rjmp	.+38     	; 0xda4 <vfprintf+0x154>
     d7e:	28 01       	movw	r4, r16
     d80:	f2 e0       	ldi	r31, 0x02	; 2
     d82:	4f 0e       	add	r4, r31
     d84:	51 1c       	adc	r5, r1
     d86:	f8 01       	movw	r30, r16
     d88:	a0 80       	ld	r10, Z
     d8a:	b1 80       	ldd	r11, Z+1	; 0x01
     d8c:	36 fe       	sbrs	r3, 6
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <vfprintf+0x146>
     d90:	69 2d       	mov	r22, r9
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x14a>
     d96:	6f ef       	ldi	r22, 0xFF	; 255
     d98:	7f ef       	ldi	r23, 0xFF	; 255
     d9a:	c5 01       	movw	r24, r10
     d9c:	0e 94 14 08 	call	0x1028	; 0x1028 <strnlen>
     da0:	4c 01       	movw	r8, r24
     da2:	82 01       	movw	r16, r4
     da4:	f3 2d       	mov	r31, r3
     da6:	ff 77       	andi	r31, 0x7F	; 127
     da8:	3f 2e       	mov	r3, r31
     daa:	16 c0       	rjmp	.+44     	; 0xdd8 <vfprintf+0x188>
     dac:	28 01       	movw	r4, r16
     dae:	22 e0       	ldi	r18, 0x02	; 2
     db0:	42 0e       	add	r4, r18
     db2:	51 1c       	adc	r5, r1
     db4:	f8 01       	movw	r30, r16
     db6:	a0 80       	ld	r10, Z
     db8:	b1 80       	ldd	r11, Z+1	; 0x01
     dba:	36 fe       	sbrs	r3, 6
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <vfprintf+0x174>
     dbe:	69 2d       	mov	r22, r9
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x178>
     dc4:	6f ef       	ldi	r22, 0xFF	; 255
     dc6:	7f ef       	ldi	r23, 0xFF	; 255
     dc8:	c5 01       	movw	r24, r10
     dca:	0e 94 09 08 	call	0x1012	; 0x1012 <strnlen_P>
     dce:	4c 01       	movw	r8, r24
     dd0:	f3 2d       	mov	r31, r3
     dd2:	f0 68       	ori	r31, 0x80	; 128
     dd4:	3f 2e       	mov	r3, r31
     dd6:	82 01       	movw	r16, r4
     dd8:	33 fc       	sbrc	r3, 3
     dda:	1b c0       	rjmp	.+54     	; 0xe12 <vfprintf+0x1c2>
     ddc:	82 2d       	mov	r24, r2
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 16       	cp	r8, r24
     de2:	99 06       	cpc	r9, r25
     de4:	b0 f4       	brcc	.+44     	; 0xe12 <vfprintf+0x1c2>
     de6:	b6 01       	movw	r22, r12
     de8:	80 e2       	ldi	r24, 0x20	; 32
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     df0:	2a 94       	dec	r2
     df2:	f4 cf       	rjmp	.-24     	; 0xddc <vfprintf+0x18c>
     df4:	f5 01       	movw	r30, r10
     df6:	37 fc       	sbrc	r3, 7
     df8:	85 91       	lpm	r24, Z+
     dfa:	37 fe       	sbrs	r3, 7
     dfc:	81 91       	ld	r24, Z+
     dfe:	5f 01       	movw	r10, r30
     e00:	b6 01       	movw	r22, r12
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     e08:	21 10       	cpse	r2, r1
     e0a:	2a 94       	dec	r2
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	82 1a       	sub	r8, r18
     e10:	91 08       	sbc	r9, r1
     e12:	81 14       	cp	r8, r1
     e14:	91 04       	cpc	r9, r1
     e16:	71 f7       	brne	.-36     	; 0xdf4 <vfprintf+0x1a4>
     e18:	e8 c0       	rjmp	.+464    	; 0xfea <vfprintf+0x39a>
     e1a:	84 36       	cpi	r24, 0x64	; 100
     e1c:	11 f0       	breq	.+4      	; 0xe22 <vfprintf+0x1d2>
     e1e:	89 36       	cpi	r24, 0x69	; 105
     e20:	41 f5       	brne	.+80     	; 0xe72 <vfprintf+0x222>
     e22:	f8 01       	movw	r30, r16
     e24:	37 fe       	sbrs	r3, 7
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <vfprintf+0x1e6>
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	0c 5f       	subi	r16, 0xFC	; 252
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	08 c0       	rjmp	.+16     	; 0xe46 <vfprintf+0x1f6>
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	07 2e       	mov	r0, r23
     e3c:	00 0c       	add	r0, r0
     e3e:	88 0b       	sbc	r24, r24
     e40:	99 0b       	sbc	r25, r25
     e42:	0e 5f       	subi	r16, 0xFE	; 254
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	f3 2d       	mov	r31, r3
     e48:	ff 76       	andi	r31, 0x6F	; 111
     e4a:	3f 2e       	mov	r3, r31
     e4c:	97 ff       	sbrs	r25, 7
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <vfprintf+0x212>
     e50:	90 95       	com	r25
     e52:	80 95       	com	r24
     e54:	70 95       	com	r23
     e56:	61 95       	neg	r22
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	f0 68       	ori	r31, 0x80	; 128
     e60:	3f 2e       	mov	r3, r31
     e62:	2a e0       	ldi	r18, 0x0A	; 10
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	a3 01       	movw	r20, r6
     e68:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__ultoa_invert>
     e6c:	88 2e       	mov	r8, r24
     e6e:	86 18       	sub	r8, r6
     e70:	45 c0       	rjmp	.+138    	; 0xefc <vfprintf+0x2ac>
     e72:	85 37       	cpi	r24, 0x75	; 117
     e74:	31 f4       	brne	.+12     	; 0xe82 <vfprintf+0x232>
     e76:	23 2d       	mov	r18, r3
     e78:	2f 7e       	andi	r18, 0xEF	; 239
     e7a:	b2 2e       	mov	r11, r18
     e7c:	2a e0       	ldi	r18, 0x0A	; 10
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	25 c0       	rjmp	.+74     	; 0xecc <vfprintf+0x27c>
     e82:	93 2d       	mov	r25, r3
     e84:	99 7f       	andi	r25, 0xF9	; 249
     e86:	b9 2e       	mov	r11, r25
     e88:	8f 36       	cpi	r24, 0x6F	; 111
     e8a:	c1 f0       	breq	.+48     	; 0xebc <vfprintf+0x26c>
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <vfprintf+0x244>
     e8e:	88 35       	cpi	r24, 0x58	; 88
     e90:	79 f0       	breq	.+30     	; 0xeb0 <vfprintf+0x260>
     e92:	b5 c0       	rjmp	.+362    	; 0xffe <vfprintf+0x3ae>
     e94:	80 37       	cpi	r24, 0x70	; 112
     e96:	19 f0       	breq	.+6      	; 0xe9e <vfprintf+0x24e>
     e98:	88 37       	cpi	r24, 0x78	; 120
     e9a:	21 f0       	breq	.+8      	; 0xea4 <vfprintf+0x254>
     e9c:	b0 c0       	rjmp	.+352    	; 0xffe <vfprintf+0x3ae>
     e9e:	e9 2f       	mov	r30, r25
     ea0:	e0 61       	ori	r30, 0x10	; 16
     ea2:	be 2e       	mov	r11, r30
     ea4:	b4 fe       	sbrs	r11, 4
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <vfprintf+0x272>
     ea8:	fb 2d       	mov	r31, r11
     eaa:	f4 60       	ori	r31, 0x04	; 4
     eac:	bf 2e       	mov	r11, r31
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <vfprintf+0x272>
     eb0:	34 fe       	sbrs	r3, 4
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <vfprintf+0x278>
     eb4:	29 2f       	mov	r18, r25
     eb6:	26 60       	ori	r18, 0x06	; 6
     eb8:	b2 2e       	mov	r11, r18
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0x278>
     ebc:	28 e0       	ldi	r18, 0x08	; 8
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <vfprintf+0x27c>
     ec2:	20 e1       	ldi	r18, 0x10	; 16
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <vfprintf+0x27c>
     ec8:	20 e1       	ldi	r18, 0x10	; 16
     eca:	32 e0       	ldi	r19, 0x02	; 2
     ecc:	f8 01       	movw	r30, r16
     ece:	b7 fe       	sbrs	r11, 7
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <vfprintf+0x290>
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	0c 5f       	subi	r16, 0xFC	; 252
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	06 c0       	rjmp	.+12     	; 0xeec <vfprintf+0x29c>
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 5f       	subi	r16, 0xFE	; 254
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	a3 01       	movw	r20, r6
     eee:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__ultoa_invert>
     ef2:	88 2e       	mov	r8, r24
     ef4:	86 18       	sub	r8, r6
     ef6:	fb 2d       	mov	r31, r11
     ef8:	ff 77       	andi	r31, 0x7F	; 127
     efa:	3f 2e       	mov	r3, r31
     efc:	36 fe       	sbrs	r3, 6
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <vfprintf+0x2ca>
     f00:	23 2d       	mov	r18, r3
     f02:	2e 7f       	andi	r18, 0xFE	; 254
     f04:	a2 2e       	mov	r10, r18
     f06:	89 14       	cp	r8, r9
     f08:	58 f4       	brcc	.+22     	; 0xf20 <vfprintf+0x2d0>
     f0a:	34 fe       	sbrs	r3, 4
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <vfprintf+0x2d4>
     f0e:	32 fc       	sbrc	r3, 2
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <vfprintf+0x2d4>
     f12:	83 2d       	mov	r24, r3
     f14:	8e 7e       	andi	r24, 0xEE	; 238
     f16:	a8 2e       	mov	r10, r24
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <vfprintf+0x2d4>
     f1a:	b8 2c       	mov	r11, r8
     f1c:	a3 2c       	mov	r10, r3
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <vfprintf+0x2d6>
     f20:	b8 2c       	mov	r11, r8
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <vfprintf+0x2d6>
     f24:	b9 2c       	mov	r11, r9
     f26:	a4 fe       	sbrs	r10, 4
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <vfprintf+0x2f8>
     f2a:	fe 01       	movw	r30, r28
     f2c:	e8 0d       	add	r30, r8
     f2e:	f1 1d       	adc	r31, r1
     f30:	80 81       	ld	r24, Z
     f32:	80 33       	cpi	r24, 0x30	; 48
     f34:	21 f4       	brne	.+8      	; 0xf3e <vfprintf+0x2ee>
     f36:	9a 2d       	mov	r25, r10
     f38:	99 7e       	andi	r25, 0xE9	; 233
     f3a:	a9 2e       	mov	r10, r25
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <vfprintf+0x300>
     f3e:	a2 fe       	sbrs	r10, 2
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x2fe>
     f42:	b3 94       	inc	r11
     f44:	b3 94       	inc	r11
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <vfprintf+0x300>
     f48:	8a 2d       	mov	r24, r10
     f4a:	86 78       	andi	r24, 0x86	; 134
     f4c:	09 f0       	breq	.+2      	; 0xf50 <vfprintf+0x300>
     f4e:	b3 94       	inc	r11
     f50:	a3 fc       	sbrc	r10, 3
     f52:	11 c0       	rjmp	.+34     	; 0xf76 <vfprintf+0x326>
     f54:	a0 fe       	sbrs	r10, 0
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <vfprintf+0x314>
     f58:	b2 14       	cp	r11, r2
     f5a:	88 f4       	brcc	.+34     	; 0xf7e <vfprintf+0x32e>
     f5c:	28 0c       	add	r2, r8
     f5e:	92 2c       	mov	r9, r2
     f60:	9b 18       	sub	r9, r11
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <vfprintf+0x330>
     f64:	b2 14       	cp	r11, r2
     f66:	60 f4       	brcc	.+24     	; 0xf80 <vfprintf+0x330>
     f68:	b6 01       	movw	r22, r12
     f6a:	80 e2       	ldi	r24, 0x20	; 32
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     f72:	b3 94       	inc	r11
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <vfprintf+0x314>
     f76:	b2 14       	cp	r11, r2
     f78:	18 f4       	brcc	.+6      	; 0xf80 <vfprintf+0x330>
     f7a:	2b 18       	sub	r2, r11
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x332>
     f7e:	98 2c       	mov	r9, r8
     f80:	21 2c       	mov	r2, r1
     f82:	a4 fe       	sbrs	r10, 4
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <vfprintf+0x356>
     f86:	b6 01       	movw	r22, r12
     f88:	80 e3       	ldi	r24, 0x30	; 48
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     f90:	a2 fe       	sbrs	r10, 2
     f92:	17 c0       	rjmp	.+46     	; 0xfc2 <vfprintf+0x372>
     f94:	a1 fc       	sbrc	r10, 1
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <vfprintf+0x34e>
     f98:	88 e7       	ldi	r24, 0x78	; 120
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x352>
     f9e:	88 e5       	ldi	r24, 0x58	; 88
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	b6 01       	movw	r22, r12
     fa4:	0c c0       	rjmp	.+24     	; 0xfbe <vfprintf+0x36e>
     fa6:	8a 2d       	mov	r24, r10
     fa8:	86 78       	andi	r24, 0x86	; 134
     faa:	59 f0       	breq	.+22     	; 0xfc2 <vfprintf+0x372>
     fac:	a1 fe       	sbrs	r10, 1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfprintf+0x364>
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <vfprintf+0x366>
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	a7 fc       	sbrc	r10, 7
     fb8:	8d e2       	ldi	r24, 0x2D	; 45
     fba:	b6 01       	movw	r22, r12
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     fc2:	89 14       	cp	r8, r9
     fc4:	38 f4       	brcc	.+14     	; 0xfd4 <vfprintf+0x384>
     fc6:	b6 01       	movw	r22, r12
     fc8:	80 e3       	ldi	r24, 0x30	; 48
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     fd0:	9a 94       	dec	r9
     fd2:	f7 cf       	rjmp	.-18     	; 0xfc2 <vfprintf+0x372>
     fd4:	8a 94       	dec	r8
     fd6:	f3 01       	movw	r30, r6
     fd8:	e8 0d       	add	r30, r8
     fda:	f1 1d       	adc	r31, r1
     fdc:	80 81       	ld	r24, Z
     fde:	b6 01       	movw	r22, r12
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     fe6:	81 10       	cpse	r8, r1
     fe8:	f5 cf       	rjmp	.-22     	; 0xfd4 <vfprintf+0x384>
     fea:	22 20       	and	r2, r2
     fec:	09 f4       	brne	.+2      	; 0xff0 <vfprintf+0x3a0>
     fee:	42 ce       	rjmp	.-892    	; 0xc74 <vfprintf+0x24>
     ff0:	b6 01       	movw	r22, r12
     ff2:	80 e2       	ldi	r24, 0x20	; 32
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 2f 08 	call	0x105e	; 0x105e <fputc>
     ffa:	2a 94       	dec	r2
     ffc:	f6 cf       	rjmp	.-20     	; 0xfea <vfprintf+0x39a>
     ffe:	f6 01       	movw	r30, r12
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	97 81       	ldd	r25, Z+7	; 0x07
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x3ba>
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	2b 96       	adiw	r28, 0x0b	; 11
    100c:	e2 e1       	ldi	r30, 0x12	; 18
    100e:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__epilogue_restores__>

00001012 <strnlen_P>:
    1012:	fc 01       	movw	r30, r24
    1014:	05 90       	lpm	r0, Z+
    1016:	61 50       	subi	r22, 0x01	; 1
    1018:	70 40       	sbci	r23, 0x00	; 0
    101a:	01 10       	cpse	r0, r1
    101c:	d8 f7       	brcc	.-10     	; 0x1014 <strnlen_P+0x2>
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	8e 0f       	add	r24, r30
    1024:	9f 1f       	adc	r25, r31
    1026:	08 95       	ret

00001028 <strnlen>:
    1028:	fc 01       	movw	r30, r24
    102a:	61 50       	subi	r22, 0x01	; 1
    102c:	70 40       	sbci	r23, 0x00	; 0
    102e:	01 90       	ld	r0, Z+
    1030:	01 10       	cpse	r0, r1
    1032:	d8 f7       	brcc	.-10     	; 0x102a <strnlen+0x2>
    1034:	80 95       	com	r24
    1036:	90 95       	com	r25
    1038:	8e 0f       	add	r24, r30
    103a:	9f 1f       	adc	r25, r31
    103c:	08 95       	ret

0000103e <strrev>:
    103e:	dc 01       	movw	r26, r24
    1040:	fc 01       	movw	r30, r24
    1042:	67 2f       	mov	r22, r23
    1044:	71 91       	ld	r23, Z+
    1046:	77 23       	and	r23, r23
    1048:	e1 f7       	brne	.-8      	; 0x1042 <strrev+0x4>
    104a:	32 97       	sbiw	r30, 0x02	; 2
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <strrev+0x18>
    104e:	7c 91       	ld	r23, X
    1050:	6d 93       	st	X+, r22
    1052:	70 83       	st	Z, r23
    1054:	62 91       	ld	r22, -Z
    1056:	ae 17       	cp	r26, r30
    1058:	bf 07       	cpc	r27, r31
    105a:	c8 f3       	brcs	.-14     	; 0x104e <strrev+0x10>
    105c:	08 95       	ret

0000105e <fputc>:
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	fb 01       	movw	r30, r22
    1068:	23 81       	ldd	r18, Z+3	; 0x03
    106a:	21 fd       	sbrc	r18, 1
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <fputc+0x16>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <fputc+0x6e>
    1074:	22 ff       	sbrs	r18, 2
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <fputc+0x46>
    1078:	46 81       	ldd	r20, Z+6	; 0x06
    107a:	57 81       	ldd	r21, Z+7	; 0x07
    107c:	24 81       	ldd	r18, Z+4	; 0x04
    107e:	35 81       	ldd	r19, Z+5	; 0x05
    1080:	42 17       	cp	r20, r18
    1082:	53 07       	cpc	r21, r19
    1084:	44 f4       	brge	.+16     	; 0x1096 <fputc+0x38>
    1086:	a0 81       	ld	r26, Z
    1088:	b1 81       	ldd	r27, Z+1	; 0x01
    108a:	9d 01       	movw	r18, r26
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	31 83       	std	Z+1, r19	; 0x01
    1092:	20 83       	st	Z, r18
    1094:	8c 93       	st	X, r24
    1096:	26 81       	ldd	r18, Z+6	; 0x06
    1098:	37 81       	ldd	r19, Z+7	; 0x07
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	37 83       	std	Z+7, r19	; 0x07
    10a0:	26 83       	std	Z+6, r18	; 0x06
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <fputc+0x6e>
    10a4:	8b 01       	movw	r16, r22
    10a6:	ec 01       	movw	r28, r24
    10a8:	fb 01       	movw	r30, r22
    10aa:	00 84       	ldd	r0, Z+8	; 0x08
    10ac:	f1 85       	ldd	r31, Z+9	; 0x09
    10ae:	e0 2d       	mov	r30, r0
    10b0:	09 95       	icall
    10b2:	89 2b       	or	r24, r25
    10b4:	e1 f6       	brne	.-72     	; 0x106e <fputc+0x10>
    10b6:	d8 01       	movw	r26, r16
    10b8:	16 96       	adiw	r26, 0x06	; 6
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	17 97       	sbiw	r26, 0x07	; 7
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	17 96       	adiw	r26, 0x07	; 7
    10c4:	9c 93       	st	X, r25
    10c6:	8e 93       	st	-X, r24
    10c8:	16 97       	sbiw	r26, 0x06	; 6
    10ca:	ce 01       	movw	r24, r28
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <__ultoa_invert>:
    10d6:	fa 01       	movw	r30, r20
    10d8:	aa 27       	eor	r26, r26
    10da:	28 30       	cpi	r18, 0x08	; 8
    10dc:	51 f1       	breq	.+84     	; 0x1132 <__ultoa_invert+0x5c>
    10de:	20 31       	cpi	r18, 0x10	; 16
    10e0:	81 f1       	breq	.+96     	; 0x1142 <__ultoa_invert+0x6c>
    10e2:	e8 94       	clt
    10e4:	6f 93       	push	r22
    10e6:	6e 7f       	andi	r22, 0xFE	; 254
    10e8:	6e 5f       	subi	r22, 0xFE	; 254
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	8f 4f       	sbci	r24, 0xFF	; 255
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	af 4f       	sbci	r26, 0xFF	; 255
    10f2:	b1 e0       	ldi	r27, 0x01	; 1
    10f4:	3e d0       	rcall	.+124    	; 0x1172 <__ultoa_invert+0x9c>
    10f6:	b4 e0       	ldi	r27, 0x04	; 4
    10f8:	3c d0       	rcall	.+120    	; 0x1172 <__ultoa_invert+0x9c>
    10fa:	67 0f       	add	r22, r23
    10fc:	78 1f       	adc	r23, r24
    10fe:	89 1f       	adc	r24, r25
    1100:	9a 1f       	adc	r25, r26
    1102:	a1 1d       	adc	r26, r1
    1104:	68 0f       	add	r22, r24
    1106:	79 1f       	adc	r23, r25
    1108:	8a 1f       	adc	r24, r26
    110a:	91 1d       	adc	r25, r1
    110c:	a1 1d       	adc	r26, r1
    110e:	6a 0f       	add	r22, r26
    1110:	71 1d       	adc	r23, r1
    1112:	81 1d       	adc	r24, r1
    1114:	91 1d       	adc	r25, r1
    1116:	a1 1d       	adc	r26, r1
    1118:	20 d0       	rcall	.+64     	; 0x115a <__ultoa_invert+0x84>
    111a:	09 f4       	brne	.+2      	; 0x111e <__ultoa_invert+0x48>
    111c:	68 94       	set
    111e:	3f 91       	pop	r19
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	26 9f       	mul	r18, r22
    1124:	11 24       	eor	r1, r1
    1126:	30 19       	sub	r19, r0
    1128:	30 5d       	subi	r19, 0xD0	; 208
    112a:	31 93       	st	Z+, r19
    112c:	de f6       	brtc	.-74     	; 0x10e4 <__ultoa_invert+0xe>
    112e:	cf 01       	movw	r24, r30
    1130:	08 95       	ret
    1132:	46 2f       	mov	r20, r22
    1134:	47 70       	andi	r20, 0x07	; 7
    1136:	40 5d       	subi	r20, 0xD0	; 208
    1138:	41 93       	st	Z+, r20
    113a:	b3 e0       	ldi	r27, 0x03	; 3
    113c:	0f d0       	rcall	.+30     	; 0x115c <__ultoa_invert+0x86>
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__ultoa_invert+0x5c>
    1140:	f6 cf       	rjmp	.-20     	; 0x112e <__ultoa_invert+0x58>
    1142:	46 2f       	mov	r20, r22
    1144:	4f 70       	andi	r20, 0x0F	; 15
    1146:	40 5d       	subi	r20, 0xD0	; 208
    1148:	4a 33       	cpi	r20, 0x3A	; 58
    114a:	18 f0       	brcs	.+6      	; 0x1152 <__ultoa_invert+0x7c>
    114c:	49 5d       	subi	r20, 0xD9	; 217
    114e:	31 fd       	sbrc	r19, 1
    1150:	40 52       	subi	r20, 0x20	; 32
    1152:	41 93       	st	Z+, r20
    1154:	02 d0       	rcall	.+4      	; 0x115a <__ultoa_invert+0x84>
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__ultoa_invert+0x6c>
    1158:	ea cf       	rjmp	.-44     	; 0x112e <__ultoa_invert+0x58>
    115a:	b4 e0       	ldi	r27, 0x04	; 4
    115c:	a6 95       	lsr	r26
    115e:	97 95       	ror	r25
    1160:	87 95       	ror	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	ba 95       	dec	r27
    1168:	c9 f7       	brne	.-14     	; 0x115c <__ultoa_invert+0x86>
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 05       	cpc	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	08 95       	ret
    1172:	9b 01       	movw	r18, r22
    1174:	ac 01       	movw	r20, r24
    1176:	0a 2e       	mov	r0, r26
    1178:	06 94       	lsr	r0
    117a:	57 95       	ror	r21
    117c:	47 95       	ror	r20
    117e:	37 95       	ror	r19
    1180:	27 95       	ror	r18
    1182:	ba 95       	dec	r27
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__ultoa_invert+0xa2>
    1186:	62 0f       	add	r22, r18
    1188:	73 1f       	adc	r23, r19
    118a:	84 1f       	adc	r24, r20
    118c:	95 1f       	adc	r25, r21
    118e:	a0 1d       	adc	r26, r0
    1190:	08 95       	ret

00001192 <__prologue_saves__>:
    1192:	2f 92       	push	r2
    1194:	3f 92       	push	r3
    1196:	4f 92       	push	r4
    1198:	5f 92       	push	r5
    119a:	6f 92       	push	r6
    119c:	7f 92       	push	r7
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	ca 1b       	sub	r28, r26
    11bc:	db 0b       	sbc	r29, r27
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	09 94       	ijmp

000011ca <__epilogue_restores__>:
    11ca:	2a 88       	ldd	r2, Y+18	; 0x12
    11cc:	39 88       	ldd	r3, Y+17	; 0x11
    11ce:	48 88       	ldd	r4, Y+16	; 0x10
    11d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    11d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    11d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    11d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    11d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    11da:	aa 84       	ldd	r10, Y+10	; 0x0a
    11dc:	b9 84       	ldd	r11, Y+9	; 0x09
    11de:	c8 84       	ldd	r12, Y+8	; 0x08
    11e0:	df 80       	ldd	r13, Y+7	; 0x07
    11e2:	ee 80       	ldd	r14, Y+6	; 0x06
    11e4:	fd 80       	ldd	r15, Y+5	; 0x05
    11e6:	0c 81       	ldd	r16, Y+4	; 0x04
    11e8:	1b 81       	ldd	r17, Y+3	; 0x03
    11ea:	aa 81       	ldd	r26, Y+2	; 0x02
    11ec:	b9 81       	ldd	r27, Y+1	; 0x01
    11ee:	ce 0f       	add	r28, r30
    11f0:	d1 1d       	adc	r29, r1
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	ed 01       	movw	r28, r26
    11fe:	08 95       	ret

00001200 <_exit>:
    1200:	f8 94       	cli

00001202 <__stop_program>:
    1202:	ff cf       	rjmp	.-2      	; 0x1202 <__stop_program>
